/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PartyBidInterface extends ethers.utils.Interface {
  functions: {
    "auctionId()": FunctionFragment;
    "bid()": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claimed(address)": FunctionFragment;
    "contribute()": FunctionFragment;
    "contributions(address,uint256)": FunctionFragment;
    "finalize()": FunctionFragment;
    "highestBid()": FunctionFragment;
    "initialize(address,address,uint256,uint256,string,string)": FunctionFragment;
    "marketWrapper()": FunctionFragment;
    "name()": FunctionFragment;
    "nftContract()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "partyDAOMultisig()": FunctionFragment;
    "partyStatus()": FunctionFragment;
    "recover()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "tokenVault()": FunctionFragment;
    "tokenVaultFactory()": FunctionFragment;
    "totalContributed(address)": FunctionFragment;
    "totalContributedToParty()": FunctionFragment;
    "totalSpent()": FunctionFragment;
    "valueToTokens(uint256)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "auctionId", values?: undefined): string;
  encodeFunctionData(functionFragment: "bid", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "claimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "partyDAOMultisig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "partyStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recover", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributedToParty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSpent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueToTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "auctionId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partyDAOMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributedToParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valueToTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "Bid(uint256)": EventFragment;
    "Claimed(address,uint256,uint256,uint256)": EventFragment;
    "Contributed(address,uint256,uint256,uint256)": EventFragment;
    "Finalized(uint8,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
}

export class PartyBid extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PartyBidInterface;

  functions: {
    auctionId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "auctionId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bid(overrides?: Overrides): Promise<ContractTransaction>;

    "bid()"(overrides?: Overrides): Promise<ContractTransaction>;

    claim(
      _contributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address)"(
      _contributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    contribute(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "contribute()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    contributions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      previousTotalContributedToParty: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "contributions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      previousTotalContributedToParty: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    highestBid(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "highestBid()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    initialize(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketWrapper(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "marketWrapper()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nftContract(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "nftContract()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    partyDAOMultisig(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "partyDAOMultisig()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    partyStatus(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "partyStatus()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    recover(overrides?: Overrides): Promise<ContractTransaction>;

    "recover()"(overrides?: Overrides): Promise<ContractTransaction>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenVault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenVault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenVaultFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenVaultFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalContributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalContributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalContributedToParty(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalContributedToParty()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSpent(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSpent()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    valueToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _tokens: BigNumber;
      0: BigNumber;
    }>;

    "valueToTokens(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _tokens: BigNumber;
      0: BigNumber;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  auctionId(overrides?: CallOverrides): Promise<BigNumber>;

  "auctionId()"(overrides?: CallOverrides): Promise<BigNumber>;

  bid(overrides?: Overrides): Promise<ContractTransaction>;

  "bid()"(overrides?: Overrides): Promise<ContractTransaction>;

  claim(
    _contributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address)"(
    _contributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "claimed(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  contribute(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "contribute()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  contributions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    previousTotalContributedToParty: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "contributions(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amount: BigNumber;
    previousTotalContributedToParty: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  highestBid(overrides?: CallOverrides): Promise<BigNumber>;

  "highestBid()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _marketWrapper: string,
    _nftContract: string,
    _tokenId: BigNumberish,
    _auctionId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256,string,string)"(
    _marketWrapper: string,
    _nftContract: string,
    _tokenId: BigNumberish,
    _auctionId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketWrapper(overrides?: CallOverrides): Promise<string>;

  "marketWrapper()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  "nftContract()"(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  partyDAOMultisig(overrides?: CallOverrides): Promise<string>;

  "partyDAOMultisig()"(overrides?: CallOverrides): Promise<string>;

  partyStatus(overrides?: CallOverrides): Promise<number>;

  "partyStatus()"(overrides?: CallOverrides): Promise<number>;

  recover(overrides?: Overrides): Promise<ContractTransaction>;

  "recover()"(overrides?: Overrides): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokenVault(overrides?: CallOverrides): Promise<string>;

  "tokenVault()"(overrides?: CallOverrides): Promise<string>;

  tokenVaultFactory(overrides?: CallOverrides): Promise<string>;

  "tokenVaultFactory()"(overrides?: CallOverrides): Promise<string>;

  totalContributed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalContributed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalContributedToParty(overrides?: CallOverrides): Promise<BigNumber>;

  "totalContributedToParty()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSpent()"(overrides?: CallOverrides): Promise<BigNumber>;

  valueToTokens(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "valueToTokens(uint256)"(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionId(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionId()"(overrides?: CallOverrides): Promise<BigNumber>;

    bid(overrides?: CallOverrides): Promise<void>;

    "bid()"(overrides?: CallOverrides): Promise<void>;

    claim(_contributor: string, overrides?: CallOverrides): Promise<void>;

    "claim(address)"(
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contribute(overrides?: CallOverrides): Promise<void>;

    "contribute()"(overrides?: CallOverrides): Promise<void>;

    contributions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      previousTotalContributedToParty: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "contributions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amount: BigNumber;
      previousTotalContributedToParty: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    finalize(overrides?: CallOverrides): Promise<void>;

    "finalize()"(overrides?: CallOverrides): Promise<void>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    "highestBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    marketWrapper(overrides?: CallOverrides): Promise<string>;

    "marketWrapper()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    "nftContract()"(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    partyDAOMultisig(overrides?: CallOverrides): Promise<string>;

    "partyDAOMultisig()"(overrides?: CallOverrides): Promise<string>;

    partyStatus(overrides?: CallOverrides): Promise<number>;

    "partyStatus()"(overrides?: CallOverrides): Promise<number>;

    recover(overrides?: CallOverrides): Promise<void>;

    "recover()"(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenVault(overrides?: CallOverrides): Promise<string>;

    "tokenVault()"(overrides?: CallOverrides): Promise<string>;

    tokenVaultFactory(overrides?: CallOverrides): Promise<string>;

    "tokenVaultFactory()"(overrides?: CallOverrides): Promise<string>;

    totalContributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalContributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalContributedToParty(overrides?: CallOverrides): Promise<BigNumber>;

    "totalContributedToParty()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSpent()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueToTokens(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Bid(amount: null): EventFilter;

    Claimed(
      contributor: string | null,
      totalContributed: null,
      excessContribution: null,
      tokenAmount: null
    ): EventFilter;

    Contributed(
      contributor: string | null,
      amount: null,
      previousTotalContributedToParty: null,
      totalFromContributor: null
    ): EventFilter;

    Finalized(
      result: null,
      totalSpent: null,
      fee: null,
      totalContributed: null
    ): EventFilter;
  };

  estimateGas: {
    auctionId(overrides?: CallOverrides): Promise<BigNumber>;

    "auctionId()"(overrides?: CallOverrides): Promise<BigNumber>;

    bid(overrides?: Overrides): Promise<BigNumber>;

    "bid()"(overrides?: Overrides): Promise<BigNumber>;

    claim(_contributor: string, overrides?: Overrides): Promise<BigNumber>;

    "claim(address)"(
      _contributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(overrides?: PayableOverrides): Promise<BigNumber>;

    "contribute()"(overrides?: PayableOverrides): Promise<BigNumber>;

    contributions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contributions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    "highestBid()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "marketWrapper()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    "nftContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    partyDAOMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    "partyDAOMultisig()"(overrides?: CallOverrides): Promise<BigNumber>;

    partyStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "partyStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    recover(overrides?: Overrides): Promise<BigNumber>;

    "recover()"(overrides?: Overrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenVault(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenVaultFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalContributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalContributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalContributedToParty(overrides?: CallOverrides): Promise<BigNumber>;

    "totalContributedToParty()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSpent(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSpent()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "valueToTokens(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "auctionId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(overrides?: Overrides): Promise<PopulatedTransaction>;

    "bid()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claim(
      _contributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address)"(
      _contributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "contribute()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    contributions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contributions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    highestBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "highestBid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketWrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nftContract()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    partyDAOMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "partyDAOMultisig()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partyStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "partyStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recover(overrides?: Overrides): Promise<PopulatedTransaction>;

    "recover()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenVaultFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalContributed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalContributed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalContributedToParty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalContributedToParty()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSpent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSpent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    valueToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "valueToTokens(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
