/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PartyBidFactoryInterface extends ethers.utils.Interface {
  functions: {
    "logic()": FunctionFragment;
    "partyDAOMultisig()": FunctionFragment;
    "startParty(address,address,uint256,uint256,string,string)": FunctionFragment;
    "tokenVaultFactory()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "logic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "partyDAOMultisig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startParty",
    values: [string, string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenVaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "logic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partyDAOMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startParty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "PartyBidDeployed(address,address,address,uint256,address,uint256,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PartyBidDeployed"): EventFragment;
}

export class PartyBidFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PartyBidFactoryInterface;

  functions: {
    logic(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "logic()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    partyDAOMultisig(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "partyDAOMultisig()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    startParty(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startParty(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenVaultFactory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenVaultFactory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  logic(overrides?: CallOverrides): Promise<string>;

  "logic()"(overrides?: CallOverrides): Promise<string>;

  partyDAOMultisig(overrides?: CallOverrides): Promise<string>;

  "partyDAOMultisig()"(overrides?: CallOverrides): Promise<string>;

  startParty(
    _marketWrapper: string,
    _nftContract: string,
    _tokenId: BigNumberish,
    _auctionId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startParty(address,address,uint256,uint256,string,string)"(
    _marketWrapper: string,
    _nftContract: string,
    _tokenId: BigNumberish,
    _auctionId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenVaultFactory(overrides?: CallOverrides): Promise<string>;

  "tokenVaultFactory()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    logic(overrides?: CallOverrides): Promise<string>;

    "logic()"(overrides?: CallOverrides): Promise<string>;

    partyDAOMultisig(overrides?: CallOverrides): Promise<string>;

    "partyDAOMultisig()"(overrides?: CallOverrides): Promise<string>;

    startParty(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "startParty(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenVaultFactory(overrides?: CallOverrides): Promise<string>;

    "tokenVaultFactory()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    PartyBidDeployed(
      partyBidProxy: null,
      creator: null,
      nftContract: null,
      tokenId: null,
      marketWrapper: null,
      auctionId: null,
      name: null,
      symbol: null
    ): EventFilter;
  };

  estimateGas: {
    logic(overrides?: CallOverrides): Promise<BigNumber>;

    "logic()"(overrides?: CallOverrides): Promise<BigNumber>;

    partyDAOMultisig(overrides?: CallOverrides): Promise<BigNumber>;

    "partyDAOMultisig()"(overrides?: CallOverrides): Promise<BigNumber>;

    startParty(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startParty(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenVaultFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    logic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "logic()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partyDAOMultisig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "partyDAOMultisig()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startParty(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startParty(address,address,uint256,uint256,string,string)"(
      _marketWrapper: string,
      _nftContract: string,
      _tokenId: BigNumberish,
      _auctionId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenVaultFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
